@model EducaEFRT.Models.ViewModels.EditarDocenteViewModel
@using EducaEFRT.Models.ViewModels

@{
    ViewData["Title"] = "Editar Docente";
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - EduControl</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'primary': '#4361ee',
                        'secondary': '#3f37c9',
                        'accent': '#4895ef',
                        'dark': '#0d3b66',
                        'light': '#f8f9fa',
                        'primary-light': '#eef2ff',
                        'text-main': '#334155',
                        'text-secondary': '#64748b'
                    },
                    fontFamily: {
                        'poppins': ['Poppins', 'sans-serif']
                    }
                }
            }
        }
    </script>

    <style>
        .bg-gradient-custom {
            background: linear-gradient(135deg, #f6f8fc 0%, #e8effa 100%);
        }

        .modal {
            background-color: rgba(0, 0, 0, 0.4);
        }
    </style>
</head>

<body class="font-poppins bg-gradient-custom text-text-main min-h-screen">
    <div class="w-full max-w-5xl mx-auto p-6">
        <!-- Header -->
        <header class="flex justify-between items-center mb-8 pb-4 border-b border-gray-200">
            <div class="flex items-center gap-4">
                <a href="@Url.Action("GestionDocente", "Admin")" class="text-primary hover:text-secondary transition-colors" title="Volver a la lista">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </a>
                <div>
                    <h1 class="text-3xl font-bold text-dark m-0">EDITAR DOCENTE</h1>
                    <p class="text-text-secondary m-0">Modifique los datos del docente</p>
                </div>
            </div>
        </header>

        <!-- Contenido Principal -->
        <main class="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
            @using (Html.BeginForm("EditarDocente", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Docente.IdDocente)

                <!-- Sección Datos Personales -->
                <section>
                    <h2 class="text-xl font-semibold text-text-secondary mt-0 mb-8 border-l-4 border-primary pl-4">
                        Datos Personales
                    </h2>

                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <div class="lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
                            <div>
                                <label class="block text-sm font-medium text-text-secondary">DNI</label>
                                @Html.TextBoxFor(m => m.Docente.Dni, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-text-secondary">Nombres</label>
                                @Html.TextBoxFor(m => m.Docente.Nombres, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-text-secondary">Apellidos</label>
                                @Html.TextBoxFor(m => m.Docente.Apellidos, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-text-secondary">Correo</label>
                                @Html.TextBoxFor(m => m.Docente.Correo, new { @class = "w-full border rounded-lg px-3 py-2 mt-1", type = "email" })
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-text-secondary">Celular</label>
                                @Html.TextBoxFor(m => m.Docente.Celular, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-text-secondary">Dirección</label>
                                @Html.TextBoxFor(m => m.Docente.Direccion, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-text-secondary">Profesión</label>
                                @Html.TextBoxFor(m => m.Docente.Profesion, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-text-secondary">Grado Académico</label>
                                @Html.TextBoxFor(m => m.Docente.GradoAcademico, new { @class = "w-full border rounded-lg px-3 py-2 mt-1" })
                            </div>
                        </div>

                        <div class="lg:col-span-1 flex flex-col items-center">
                            <div class="w-full max-w-[250px] aspect-square rounded-lg overflow-hidden border-4 border-white shadow-lg flex items-center justify-center bg-gray-100 relative">
                                <img id="previewImage"
                                     src="@(string.IsNullOrEmpty(Model.Docente.Foto) ? "" : Url.Content(Model.Docente.Foto))"
                                     alt="Foto del docente"
                                     class="w-full h-full object-cover @(string.IsNullOrEmpty(Model.Docente.Foto) ? "hidden" : "")" />

                                @if (string.IsNullOrEmpty(Model.Docente.Foto))
                                {
                                    var iniciales = "";
                                    if (!string.IsNullOrEmpty(Model.Docente.Nombres))
                                    {
                                        iniciales += Model.Docente.Nombres[0].ToString().ToUpper();
                                    }
                                    if (!string.IsNullOrEmpty(Model.Docente.Apellidos))
                                    {
                                        iniciales += Model.Docente.Apellidos[0].ToString().ToUpper();
                                    }

                                    <span id="initialPlaceholder"
                                          class="absolute text-6xl font-bold text-gray-600">
                                        @(string.IsNullOrEmpty(iniciales) ? "?" : iniciales)
                                    </span>
                                }
                            </div>


                            <label class="mt-4 cursor-pointer bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-all duration-300">
                                Cambiar Foto
                                <input type="file" name="FotoFile" id="FotoFile" accept="image/*" class="hidden" onchange="previewPhoto(event)" />
                            </label>
                        </div>
                    </div>
                </section>

                <!-- Cursos Asignados -->
                <section class="mt-10 pt-6 border-t border-gray-200">
                    <h2 class="text-xl font-semibold text-text-secondary mt-0 mb-8 border-l-4 border-primary pl-4">
                        Cursos Asignados (@(Model.CursosAsignados?.Count ?? 0))
                    </h2>

                    <div class="overflow-x-auto">
                        <table class="w-full text-sm border border-gray-200 rounded-lg overflow-hidden">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left">Curso</th>
                                    <th class="px-6 py-3 text-left">Sección</th>
                                    <th class="px-6 py-3 text-left">Turno</th>
                                    <th class="px-6 py-3 text-left">Inicio</th>
                                    <th class="px-6 py-3 text-left">Fin</th>
                                    <th class="px-6 py-3 text-center">Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.CursosAsignados != null && Model.CursosAsignados.Any())
                                {
                                    foreach (var item in Model.CursosAsignados)
                                    {
                                        <tr class="border-t hover:bg-gray-50">
                                            <td class="px-6 py-3">@item.CursoNombre</td>
                                            <td class="px-6 py-3">@item.SeccionNombre</td>
                                            <td class="px-6 py-3">@item.TurnoNombre</td>
                                            <td class="px-6 py-3">@item.FechaInicio.ToString("dd/MM/yyyy")</td>
                                            <td class="px-6 py-3">@item.FechaFin.ToString("dd/MM/yyyy")</td>
                                            <td class="px-6 py-3 text-center flex justify-center gap-3">
                                                <button type="button" class="bg-yellow-400 hover:bg-yellow-500 text-white px-3 py-1 rounded-md text-xs"
                                                        onclick="openEditModal(@item.IdAsignacion, '@item.CursoNombre', '@item.SeccionNombre', '@item.TurnoNombre', '@item.FechaInicio.ToString("yyyy-MM-dd")', '@item.FechaFin.ToString("yyyy-MM-dd")')">
                                                    Editar
                                                </button>
                                                <a href="@Url.Action("EliminarAsignacion", "Admin", new { id = item.IdAsignacion })"
                                                   class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-md text-xs"
                                                   onclick="return confirm('¿Seguro que desea eliminar esta asignación?');">
                                                    Eliminar
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                                <tr class="bg-gray-50">
                                    <td colspan="6" class="text-center py-3">
                                        <button type="button" onclick="openAddModal()"
                                                class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-semibold">
                                            + Asignar Curso
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>

                <!-- Botones -->
                <div class="mt-10 pt-6 border-t border-gray-200 flex justify-end gap-4">
                    <a href="@Url.Action("GestionDocente", "Admin")" class="bg-white border border-gray-300 text-text-main px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-all duration-300">Cancelar</a>
                    <button type="submit" class="bg-primary text-white px-8 py-3 rounded-lg font-semibold hover:bg-secondary transition-all duration-300">
                        Guardar Cambios
                    </button>
                </div>
            }
        </main>
    </div>

    <!-- MODAL AGREGAR -->
    <div id="addModal" class="fixed inset-0 hidden items-center justify-center modal">
        <div class="bg-white p-6 rounded-xl shadow-xl w-full max-w-md">
            <h3 class="text-lg font-semibold mb-4">Asignar Nuevo Curso</h3>
            <form action="@Url.Action("AgregarAsignacion", "Admin")" method="post">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Docente.IdDocente)
                <div class="space-y-3">
                    <select name="IdCurso" id="selectCurso" class="w-full border rounded-lg px-3 py-2">
                        <option value="">-- Seleccione Curso --</option>
                    </select>
                    <select name="IdSeccion" class="w-full border rounded-lg px-3 py-2">
                        <option value="">-- Seleccione Sección --</option>
                        <option value="1">A1</option>
                        <option value="2">B1</option>
                        <option value="3">C1</option>
                        <option value="4">D1</option>
                        <option value="5">A2</option>
                        <option value="6">B2</option>
                    </select>
                    <select name="IdTurno" class="w-full border rounded-lg px-3 py-2">
                        <option value="">-- Seleccione Turno --</option>
                        <option value="1">Mañana</option>
                        <option value="2">Tarde</option>
                        <option value="3">Noche</option>
                    </select>
                    <input type="date" name="FechaInicio" class="w-full border rounded-lg px-3 py-2" />
                    <input type="date" name="FechaFin" class="w-full border rounded-lg px-3 py-2" />
                </div>
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" onclick="closeAddModal()" class="px-4 py-2 bg-gray-300 rounded-lg">Cancelar</button>
                    <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg">Guardar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- MODAL EDITAR -->
    <div id="editModal" class="fixed inset-0 hidden items-center justify-center modal">
        <div class="bg-white p-6 rounded-xl shadow-xl w-full max-w-md">
            <h3 class="text-lg font-semibold mb-4">Editar Asignación</h3>
            <form action="@Url.Action("EditarAsignacion", "Admin")" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editIdAsignacion" name="IdAsignacion" />
                <input type="hidden" name="IdDocente" value="@Model.Docente.IdDocente" />
                <div class="space-y-3">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Curso</label>
                        <input type="text" id="editCurso" name="CursoNombre" class="w-full border rounded-lg px-3 py-2" readonly />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Sección</label>
                        <input type="text" id="editSeccion" name="SeccionNombre" class="w-full border rounded-lg px-3 py-2" readonly />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Turno</label>
                        <select id="editTurno" name="IdTurno" class="w-full border rounded-lg px-3 py-2">
                            <option value="1">Mañana</option>
                            <option value="2">Tarde</option>
                            <option value="3">Noche</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Fecha Inicio</label>
                        <input type="date" id="editFechaInicio" name="FechaInicio" class="w-full border rounded-lg px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Fecha Fin</label>
                        <input type="date" id="editFechaFin" name="FechaFin" class="w-full border rounded-lg px-3 py-2" />
                    </div>
                </div>
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-300 rounded-lg">Cancelar</button>
                    <button type="submit" class="px-4 py-2 bg-yellow-500 text-white rounded-lg">Actualizar</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        function previewPhoto(event) {
            const reader = new FileReader();
            reader.onload = function () {
                const img = document.getElementById('previewImage');
                const initial = document.getElementById('initialPlaceholder');

                // Si hay iniciales, las ocultamos
                if (initial) initial.style.display = 'none';

                // Si el <img> está oculto, lo mostramos
                if (img) {
                    img.src = reader.result;
                    img.classList.remove('hidden');
                    img.style.display = 'block';
                }
            };
            reader.readAsDataURL(event.target.files[0]);
        }

        function openAddModal() {
            // Cargar cursos disponibles
            fetch('@Url.Action("ObtenerCursos", "Admin")')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('selectCurso');
                    select.innerHTML = '<option value="">-- Seleccione Curso --</option>';
                    data.forEach(curso => {
                        select.innerHTML += `<option value="${curso.IdCurso}">${curso.NombreCurso}</option>`;
                    });
                });
            
            document.getElementById('addModal').classList.remove('hidden');
            document.getElementById('addModal').classList.add('flex');
        }
        function closeAddModal() {
            document.getElementById('addModal').classList.add('hidden');
        }

        function openEditModal(id, curso, seccion, turno, inicio, fin) {
            document.getElementById('editIdAsignacion').value = id;
            document.getElementById('editCurso').value = curso;
            document.getElementById('editSeccion').value = seccion;
            
            // Seleccionar el turno correcto en el dropdown
            const turnoSelect = document.getElementById('editTurno');
            if (turno === 'Mañana') {
                turnoSelect.value = '1';
            } else if (turno === 'Tarde') {
                turnoSelect.value = '2';
            } else if (turno === 'Noche') {
                turnoSelect.value = '3';
            }
            
            document.getElementById('editFechaInicio').value = inicio;
            document.getElementById('editFechaFin').value = fin;
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }
        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
        }
    </script>
</body>
</html>
